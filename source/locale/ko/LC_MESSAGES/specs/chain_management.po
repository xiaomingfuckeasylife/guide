# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, AERGO team and contributors
# This file is distributed under the same license as the aergo-guide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aergo-guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-08 16:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/specs/chain_management.rst:2
msgid "chain management"
msgstr ""

#: ../../source/specs/chain_management.rst:3
msgid "The chainServcie module is responsible for managing the chain."
msgstr ""

#: ../../source/specs/chain_management.rst:5
msgid "ChainServcie performs the following tasks in large part:"
msgstr ""

#: ../../source/specs/chain_management.rst:7
#: ../../source/specs/chain_management.rst:12
msgid "insert block to chain"
msgstr ""

#: ../../source/specs/chain_management.rst:8
msgid "reorganization"
msgstr ""

#: ../../source/specs/chain_management.rst:9
msgid "syncronize chain"
msgstr ""

#: ../../source/specs/chain_management.rst:13
msgid "There are two cases in which Chainservcie adds blocks:"
msgstr ""

#: ../../source/specs/chain_management.rst:15
msgid ""
"1. Block generated by Block Factory When BP nodes are in the order in "
"which they are created, blocks are created in the Block Factory."
msgstr ""

#: ../../source/specs/chain_management.rst:18
msgid ""
"Block Factory performs all transactions and forwards the block to the "
"ChainService. Therefore, the execution results are included with the "
"block."
msgstr ""

#: ../../source/specs/chain_management.rst:20
msgid ""
"The execution results include the results of the transaction, reception, "
"and State changed entry indicating the change to the account."
msgstr ""

#: ../../source/specs/chain_management.rst:22
msgid ""
"The chain service stores information related to blocks in the chainDB and"
" information about accounts in the StateDB."
msgstr ""

#: ../../source/specs/chain_management.rst:24
msgid ""
"2. Block received from another Peer node The blocks received from the "
"other Peer nodes are three main cases:"
msgstr ""

#: ../../source/specs/chain_management.rst:27
msgid "Orphan block"
msgstr ""

#: ../../source/specs/chain_management.rst:28
msgid ""
"This is the case if the parent block has not yet been stored in the DB. "
"Orphan blocks are stored in the orphan block cache on memory."
msgstr ""

#: ../../source/specs/chain_management.rst:30
msgid ""
"Then, when the parent block is received, it is removed from the organ "
"block cache and reprocessed."
msgstr ""

#: ../../source/specs/chain_management.rst:32
msgid "Side branch block"
msgstr ""

#: ../../source/specs/chain_management.rst:33
msgid ""
"In case the parent block is stored but is not part of the main branch. In"
" this case, the block is not performed and only the block info{hash, "
"block} is stored."
msgstr ""

#: ../../source/specs/chain_management.rst:35
msgid "main branch block"
msgstr ""

#: ../../source/specs/chain_management.rst:36
msgid ""
"In case the head of the main branch is the next block. In this case, the "
"blocks are stored after performing the transactions."
msgstr ""

#: ../../source/specs/chain_management.rst:39
msgid "The process for storing blocks in the main branch is as follows."
msgstr ""

#: ../../source/specs/chain_management.rst:41
msgid "validation before execution"
msgstr ""

#: ../../source/specs/chain_management.rst:42
msgid "execute transactions"
msgstr ""

#: ../../source/specs/chain_management.rst:43
msgid "apply changed entries of Account to State SMT"
msgstr ""

#: ../../source/specs/chain_management.rst:44
msgid "validate after execution"
msgstr ""

#: ../../source/specs/chain_management.rst:45
msgid "save State SMT to StateDB"
msgstr ""

#: ../../source/specs/chain_management.rst:46
msgid "save chain meta data to Chain DB"
msgstr ""

#: ../../source/specs/chain_management.rst:49
msgid "Block validation"
msgstr ""

#: ../../source/specs/chain_management.rst:50
msgid ""
"The blocks received in the network may not be valid, so a number of "
"checks are made."
msgstr ""

#: ../../source/specs/chain_management.rst:53
msgid "Pre-execution execution"
msgstr ""

#: ../../source/specs/chain_management.rst:54
msgid "Consensus validation"
msgstr ""

#: ../../source/specs/chain_management.rst:56
msgid ""
"Validate the block generated by the valid BP through block creation time "
"and signature."
msgstr ""

#: ../../source/specs/chain_management.rst:58
msgid "Transaction merkle validation"
msgstr ""

#: ../../source/specs/chain_management.rst:60
msgid ""
"Validate that the transactions were not forged. The Verifier module "
"generates a Merkel tree with the transactions and checks if it is the "
"same as the Transaction Merkel    root stored in the Block header."
msgstr ""

#: ../../source/specs/chain_management.rst:63
msgid ""
"The validator module can ensure that the block was generated from a valid"
" BP and the transaction contained in the block was not forged."
msgstr ""

#: ../../source/specs/chain_management.rst:66
msgid "Post-execution validation"
msgstr ""

#: ../../source/specs/chain_management.rst:67
msgid "State root validation"
msgstr ""

#: ../../source/specs/chain_management.rst:69
msgid ""
"The Validate module checks if the changed state root node hash is the "
"same as the blocksRootHash stored in the block head."
msgstr ""

#: ../../source/specs/chain_management.rst:71
msgid "Receipt merkle validation"
msgstr ""

#: ../../source/specs/chain_management.rst:73
msgid ""
"The Validate module generates a merkel tree with the reciepts generated "
"as a result of the transactions and checks if they are identical to the "
"recipts stored in the block header."
msgstr ""

#: ../../source/specs/chain_management.rst:75
msgid ""
"These checks ensure that the results of the transaction contained in the "
"block are the same as the results of the BP node that generated the "
"block."
msgstr ""

#: ../../source/specs/chain_management.rst:78
msgid "reorgnize process"
msgstr ""

#: ../../source/specs/chain_management.rst:80
msgid ""
"The ChainService module selects and maintains the longest chain as the "
"main branch."
msgstr ""

#: ../../source/specs/chain_management.rst:82
msgid ""
"The side branches are not executed and only the block info is stored in "
"the DB."
msgstr ""

#: ../../source/specs/chain_management.rst:84
msgid ""
"If the side branch received from another peer is longer than the main "
"branch held by the node, the side branch is changed to the main branch. "
"This is called the reorgnize process."
msgstr ""

#: ../../source/specs/chain_management.rst:86
msgid "The reorgnize is performed as follows."
msgstr ""

#: ../../source/specs/chain_management.rst:88
msgid "find common ancestor between main branch and side branch"
msgstr ""

#: ../../source/specs/chain_management.rst:89
#: ../../source/specs/chain_management.rst:97
msgid "rollback master branch"
msgstr ""

#: ../../source/specs/chain_management.rst:90
#: ../../source/specs/chain_management.rst:101
msgid "rollforward side branch"
msgstr ""

#: ../../source/specs/chain_management.rst:91
#: ../../source/specs/chain_management.rst:108
msgid "swap chain meta"
msgstr ""

#: ../../source/specs/chain_management.rst:93
msgid ""
"find common ancestor Syncer finds the last common ancestor block of the "
"main branch and side branch."
msgstr ""

#: ../../source/specs/chain_management.rst:97
msgid ""
"State is reset to the point at which the common ancestor block was "
"executed"
msgstr ""

#: ../../source/specs/chain_management.rst:100
msgid ""
"Syncer runs from the next number of the common ancestor block to the head"
" block of the side branch. At this time, only StateDB is changed and "
"Chain info and Tx info are not changed."
msgstr ""

#: ../../source/specs/chain_management.rst:104
msgid ""
"Syncer do not change the chain info during rollback and rollforward to "
"atomically change the chain. Change the chain meta information after the "
"previous process has been successfully completed. At this time, chain "
"info and transaction info are deleted for the rollbacked block, and new "
"chain info and transaction info are added for the rollforwarded block."
msgstr ""

#: ../../source/specs/chain_management.rst:108
msgid ""
"Transactions belonging to rollbacked blocks but not included in "
"rollforwarded blocks are returned to mempool. This is to prevent "
"transaction loss."
msgstr ""

#: ../../source/specs/chain_management.rst:111
msgid "Synchronize process"
msgstr ""

#: ../../source/specs/chain_management.rst:112
msgid ""
"If you add a new node or restart the node that was temporarily stopped, "
"you need to get the latest chain information from the existing nodes. "
"This is called the Synchonize process. The Syncer module is responsible "
"for synchronization."
msgstr ""

#: ../../source/specs/chain_management.rst:117
msgid "The situation that causes sync is as follows"
msgstr ""

#: ../../source/specs/chain_management.rst:116
msgid ""
"When the peer goes through a handshake process to connect, the height of "
"the chain of the remote peer is higher than the current node"
msgstr ""

#: ../../source/specs/chain_management.rst:117
msgid ""
"If the height of the block notified in the peer is higher than the head "
"of the current main branch"
msgstr ""

#: ../../source/specs/chain_management.rst:119
msgid ""
"The Syncer specifies the node that sent the block that caused the sync to"
" the target node and synchronizes with the chain of that node."
msgstr ""

#: ../../source/specs/chain_management.rst:121
msgid ""
"To synchronize a long chain, a large amount of block information must be "
"received from the peer node."
msgstr ""

#: ../../source/specs/chain_management.rst:123
msgid "This is likely to cause a performance degrade at the peer node."
msgstr ""

#: ../../source/specs/chain_management.rst:125
msgid ""
"Therefore, it gets information from as many peers as possible to "
"distribute the load."
msgstr ""

#: ../../source/specs/chain_management.rst:128
msgid "Synchronize step"
msgstr ""

#: ../../source/specs/chain_management.rst:129
msgid ""
"1. find common ancestor Syncer finds the last common ancestor of the "
"current node chain and the target node chain."
msgstr ""

#: ../../source/specs/chain_management.rst:132
msgid ""
"2. Get Hashes It gets the hashes of the block after the common ancestor "
"from the target node."
msgstr ""

#: ../../source/specs/chain_management.rst:135
msgid ""
"3. Get Blocks N blocks are requested from all valid peers connected to "
"the current node."
msgstr ""

#: ../../source/specs/chain_management.rst:138
msgid ""
"4. Insert blocks to chain The received block is added to the chain by "
"making an insert request to the ChainService module."
msgstr ""

#: ../../source/specs/chain_management.rst:141
msgid ""
"2, 3, and 4 are performed in parallel. Most of the time is spent in the "
"insert part of the chain. While inserting Overlapping operations on the "
"network to receive hash and block"
msgstr ""

